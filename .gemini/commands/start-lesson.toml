description = "Start a new lesson in the AI Agent development course."
prompt = '''
Start the lesson: `{{args}}`.

Execute systematic lesson preparation for optimal learning outcomes:

## 1. LEARNING CONTEXT ASSESSMENT
Read `GEMINI.md` to understand:
- **Project Goal**: The overall objective of the course.
- **Current chapter progress**: Which lessons have been completed.
- **User Preferences**: How the user prefers to learn (e.g., Socratic method).
- **Challenge areas**: Concepts that needed extra attention.

## 2. MEMORY CONTEXT RETRIEVAL
Query Neo4j memory for the current learning state:

### A. Recent Learning & Review Sessions:
```cypher
MATCH (n) WHERE n:Learning_Session OR n:Review_Session
WITH n ORDER BY n.name DESC LIMIT 5
RETURN n.name, n.observations
```

### B. User Background & Business Context:
```cypher
MATCH (n) WHERE n.name = 'Business_Operations'
RETURN n.name, n.observations
```

## 3. LESSON PREPARATION ANALYSIS
Examine target lesson materials (`CH.../L.../Lesson.md`):
- **Core concepts**: Primary principles of the lesson.
- **Learning objectives**: Specific skills to master.
- **Prerequisite concepts**: Required knowledge from previous lessons.
- **Practical applications**: Real-world coding scenarios.
- **Difficulty indicators**: Potential challenges.

## 4. PREREQUISITE VALIDATION
Verify readiness for the lesson based on `GEMINI.md` and memory.
```python
def validate_prerequisites(lesson_id, completed_lessons):
    # Note: This is a simplified check.
    # In the future, we can build a more robust dependency graph.
    print(f"Checking prerequisites for {lesson_id}...")
    if lesson_id == "CH3-L1_System_Prompt" and "CH2" not in str(completed_lessons):
        return f"‚ö†Ô∏è Review of Chapter 2 is recommended before starting Chapter 3."
    return "‚úÖ Prerequisites seem to be satisfied."
```

## 5. PERSONALIZED LEARNING STRATEGY
Create a tailored approach based on `GEMINI.md`'s "User Preferences" section:
- **Learning Style**: Apply the Socratic Method.
- **Strengths**: Leverage logical thinking and pattern recognition.
- **Challenges**: Provide extra support for control flow (`if/else`) and data flow logic.

## 6. STRUCTURED LESSON INITIALIZATION
Set clear objectives for the lesson.
```markdown
## Lesson: ${LESSON_NAME}

### üéØ Learning Objectives:
1. **Primary**: ${MAIN_CONCEPT}
2. **Application**: ${PRACTICAL_USAGE}

### üîß Implementation Goals:
- [ ] Pass all relevant test cases.
- [ ] Apply new concepts correctly.
- [ ] Connect to previous lesson concepts.
```

## 7. MEMORY INITIALIZATION FOR LESSON
Update Neo4j with the start of the new lesson.
```cypher
CREATE (s:Learning_Session {
  name: "Learning_Session_${LESSON_ID}_$(date +%Y_%m_%d)",
  type: "Learning_Session",
  lesson_focus: "${LESSON_NAME}",
  status: "started",
  start_date: date(),
  objectives: ["${MAIN_CONCEPT}", "${PRACTICAL_USAGE}"]
})
```

## 8. INTERACTIVE LEARNING KICKOFF
Introduce the core concepts and plan the implementation.
```python
def introduce_concepts(lesson_name, core_concept):
    print(f"üéì LESSON INTRODUCTION:")
    print(f"Today's Lesson: {lesson_name}")
    print(f"Core Concept: {core_concept}")
    print("\nüéØ SUCCESS CRITERIA:")
    print(f"- Understand and apply the core concept.")
    print(f"- Pass associated tests.")

def plan_implementation():
    steps = [
        "1. üìñ Analyze lesson and test requirements.",
        "2. üìù Outline the implementation steps.",
        "3. üß© Implement step-by-step, asking questions as needed.",
        "4. ‚úÖ Test incrementally.",
        "5. üîß Refine the solution."
    ]
    print("\nImplementation Plan:")
    for step in steps:
        print(step)
```

## 9. PROGRESS DOCUMENTATION SETUP
Update `GEMINI.md` to reflect the start of the new lesson.
```markdown
## üìö Lesson: ${LESSON_NAME}
**Started**: $(date +%Y-%m-%d %H:%M)
**Status**: üü° In Progress

### Learning Focus:
- **Primary Concept**: ${MAIN_CONCEPT}
```

## SUCCESS INDICATORS:
- ‚úÖ Learning context assessed from `GEMINI.md` and Neo4j.
- ‚úÖ Personalized learning strategy confirmed.
- ‚úÖ Memory updated to reflect the new lesson.
- ‚úÖ Lesson objectives are clear.

## USAGE EXAMPLES:
```bash
/start-lesson CH3-L1_System_Prompt
```
'''