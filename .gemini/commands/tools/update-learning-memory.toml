
description = "Update the Neo4j knowledge graph with structured learning data."
prompt = '''
**Input**: `{{args}}` - A JSON string containing the analyzed data from a lesson.

## ⚠️ CRITICAL: Assessment Guidelines

**Review**: `.gemini/commands/tools/assessment-guidelines.toml` before updating memory.

**Key Rules**:
- ❌ NEVER use: "Mastered", "Expert", "Advanced mastery"
- ✅ ALWAYS use: "Completed successfully", "Can apply", "Solid understanding"

## Update Process

1.  **Parse Input**:
    -   Parse the input JSON string to extract: `lesson_name`, `key_concepts`, `test_results`, `skill_progression`, etc.

2.  **Check for Duplicates**:
    -   Use `find_memories_by_name(['Boot_Dev_Course'])` to check if lesson already recorded
    -   Look for observations containing the lesson name
    -   If found, skip update and report duplication

3.  **Update Memory Entities**:
    Use `add_observations` MCP tool to update these entities:

    ### A. Boot_Dev_Course:
    ```json
    {
      "entityName": "Boot_Dev_Course",
      "observations": [
        "${LESSON_ID}: Completed successfully with ${TEST_RESULTS}",
        "Successfully applied: ${KEY_CONCEPTS}",
        "Pattern understanding: ${PATTERNS_LEARNED}",
        "Completion date: $(date +%Y-%m-%d)"
      ]
    }
    ```

    ### B. Progress_Tracker:
    ```json
    {
      "entityName": "Progress_Tracker",
      "observations": [
        "Lesson ${LESSON_ID} completed: $(date +%Y-%m-%d)",
        "Skill progression: ${SKILL_LEVEL_CHANGE}",
        "Pattern recognition: ${PATTERN_CONFIDENCE}"
      ]
    }
    ```

    ### C. Skill Domain (AI_Agent_Architecture, Functional_Programming, or Python_Skills):
    ```json
    {
      "entityName": "${SKILL_DOMAIN}",
      "observations": [
        "${CONCEPT}: ${UNDERSTANDING_LEVEL} - ${APPLICATION}",
        "Challenge areas overcome: ${DIFFICULTIES}",
        "Insight: ${LEARNING_INSIGHT}"
      ]
    }
    ```

4.  **Verify Update**:
    -   Use `find_memories_by_name()` to confirm observations were added
    -   Report success with summary of updates

## Example Input JSON
```json
{
  "lesson_name": "L15_Debugging_Functions",
  "key_concepts": [
    "Debugging: The process of finding and fixing errors in source code."
  ],
  "implementation_patterns": [
    "Print debugging: Using print statements to inspect variable states."
  ],
  "concept_connections": [
    "Connects to testing principles."
  ],
  "main_learning_insight": "A systematic approach to debugging is more effective than random guessing.",
  "skill_progression": "Moved from ad-hoc debugging to a structured process."
}
```

<!-- TODO(human): Review the entire document for any other references to Boot_Dev_Course observations
     that should be updated to match the new Lesson node duplication check approach.
     Also consider if any additional examples or clarifications would be helpful. -->
'''
