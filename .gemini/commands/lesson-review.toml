description = "Review and reinforce a completed AI Agent lesson."
prompt = '''
Review and reinforce the completed lesson: `{{args}}`.

Execute these systematic steps for maximum learning retention:

## 1. LESSON REINFORCEMENT ANALYSIS
- Re-read `Lesson.md` for concept reinforcement with focus on:
  * Core AI Agent principles introduced (e.g., System Prompts, Function Calling).
  * Vietnamese explanations for complex concepts.
  * Practical applications and use cases.
  * Connection points to previously learned material.

## 2. IMPLEMENTATION ANALYSIS
Analyze `main.py` for relevant patterns:
- **API Interaction**: How the code calls the Gemini API.
- **System Prompt Usage**: How the system prompt influences behavior.
- **Input/Output Handling**: How command-line arguments are processed and results are printed.
- **Code Structure**: Organization, readability, and modularity.
- **Test Integration**: How the implementation aligns with test requirements.

## 3. CONCEPT CONNECTION MAPPING
Connect lesson concepts to broader software development:
- **Design Patterns**: How concepts relate to common software patterns.
- **Performance**: Potential optimizations.
- **Maintainability**: Readability and ease of debugging.
- **Scalability**: How patterns apply to larger, more complex agents.

## 4. NEO4J MEMORY UPDATE
Update memory with structured learning data:

```cypher
CREATE (r:Review_Session {
  name: "Review_Session_{{args}}_$(date +%Y_%m_%d)",
  type: "Review_Session",
  reviewed_lesson: "{{args}}",
  status: "completed",
  completion_date: date(),
  key_takeaways: ["${KEY_CONCEPTS}", "${MAIN_LEARNING_INSIGHT}"]
})
```

## 5. GEMINI.MD DOCUMENTATION
Structure learning documentation with:

### Learning Summary:
- **Lesson Focus**: ${PRIMARY_CONCEPTS}
- **Implementation Approach**: ${CODING_STRATEGY}
- **Key Insight**: ${MAIN_LEARNING_INSIGHT}

### Knowledge Integration:
- **Previous Lesson Connections**: ${CONCEPT_BUILDING}
- **Vocabulary Expansion**: ${NEW_TERMINOLOGY}
- **Application Insights**: ${PRACTICAL_UNDERSTANDING}

## 6. COMMIT STRATEGY
Create a descriptive commit message:
```bash
git commit -m "‚úÖ Review: {{args}}

Mastered: ${KEY_CONCEPTS}
Insight: ${MAIN_LEARNING_INSIGHT}" 
```

## 7. FINAL WORKFLOW SUMMARY
```bash
echo "üéØ LESSON REVIEW COMPLETED"
echo "üìö Lesson: {{args}}"
echo "üíæ Neo4j memory updated."
echo "üìù Documentation updated."
echo "‚úÖ Git commit created."
```

## USAGE EXAMPLES:
```bash
/lesson-review CH3-L1_System_Prompt
```
'''