description = "Review and reinforce a completed AI Agent lesson."
prompt = '''
Review and reinforce the completed lesson: `{{args}}`.

## ‚ö†Ô∏è CRITICAL: Assessment Guidelines

**BEFORE reviewing, read**: `.gemini/commands/tools/assessment-guidelines.toml`

**Key Rules**:
- ‚ùå NEVER use: "mastery", "mastered", "expert", "advanced mastery"
- ‚úÖ ALWAYS use: "completed successfully", "can apply", "solid understanding"
- All assessments must be EVIDENCE-BASED
- Reflect LEARNING STAGE, not professional expertise

Execute these systematic steps for maximum learning retention:

## 1. LESSON REINFORCEMENT ANALYSIS
- Re-read `Lesson.md` for concept reinforcement with focus on:
  * Core AI Agent principles introduced (e.g., System Prompts, Function Calling).
  * Vietnamese explanations for complex concepts.
  * Practical applications and use cases.
  * Connection points to previously learned material.

## 2. IMPLEMENTATION ANALYSIS
Analyze `main.py` for relevant patterns:
- **API Interaction**: How the code calls the Gemini API.
- **System Prompt Usage**: How the system prompt influences behavior.
- **Input/Output Handling**: How command-line arguments are processed and results are printed.
- **Code Structure**: Organization, readability, and modularity.
- **Test Integration**: How the implementation aligns with test requirements.

## 3. CONCEPT CONNECTION MAPPING
Connect lesson concepts to broader software development:
- **Design Patterns**: How concepts relate to common software patterns.
- **Performance**: Potential optimizations.
- **Maintainability**: Readability and ease of debugging.
- **Scalability**: How patterns apply to larger, more complex agents.

## 4. OPTIMIZED NEO4J MEMORY UPDATES
Update memory entities with structured learning data:

### A. Update Boot_Dev_Course progress:
```json
{
  "entity": "Boot_Dev_Course",
  "add_observations": [
    "{{args}}: Completed successfully with ${TEST_RESULTS}",
    "Successfully applied: ${KEY_CONCEPTS}",
    "Pattern understanding: ${PATTERNS_LEARNED}",
    "Completion date: $(date +%Y-%m-%d)"
  ]
}
```

### B. Update specific skill domains:
```json
{
  "entity": "AI_Agent_Architecture" | "Functional_Programming" | "Python_Skills",
  "add_observations": [
    "${CONCEPT}: ${UNDERSTANDING_LEVEL} - ${PRACTICAL_APPLICATION}",
    "Challenge areas overcome: ${DIFFICULTIES}",
    "Insight gained: ${LEARNING_INSIGHT}"
  ]
}
```

### C. Update Progress_Tracker:
```json
{
  "entity": "Progress_Tracker",
  "add_observations": [
    "Lesson {{args}} reviewed: ${REVIEW_DATE}",
    "Skill progression: ${SKILL_LEVEL_CHANGE}",
    "Pattern understanding: ${PATTERN_CONFIDENCE_LEVEL}"
  ]
}
```

## 5. GEMINI.MD DOCUMENTATION
Structure learning documentation with:

### Learning Summary:
- **Lesson Focus**: ${PRIMARY_CONCEPTS}
- **Implementation Approach**: ${CODING_STRATEGY}
- **Key Insight**: ${MAIN_LEARNING_INSIGHT}

### Knowledge Integration:
- **Previous Lesson Connections**: ${CONCEPT_BUILDING}
- **Vocabulary Expansion**: ${NEW_TERMINOLOGY}
- **Application Insights**: ${PRACTICAL_UNDERSTANDING}

## 6. INTELLIGENT COMMIT STRATEGY
Create descriptive commit with pattern:
```bash
git commit -m "üìö Review: {{args}}

‚úÖ Completed: ${KEY_CONCEPTS}
üîó Connected: ${PATTERN_CONNECTIONS}
üí° Insight: ${MAIN_LEARNING_INSIGHT}
üìà Progress: ${SKILL_PROGRESSION}

Memory updated: ${ENTITIES_UPDATED}
Next focus: ${UPCOMING_CHALLENGES}

ü§ñ Generated with [Gemini](https://gemini.google.com)
"
```

**Note**: Use accurate assessment terminology - "completed successfully", "can apply", NOT "mastered" or "expert"!

## 7. FINAL WORKFLOW SUMMARY
```bash
echo "üéØ LESSON REVIEW COMPLETED"
echo "üìö Lesson: {{args}}"
echo "üíæ Neo4j memory updated."
echo "üìù Documentation updated."
echo "‚úÖ Git commit created."
```

## USAGE EXAMPLES:
```bash
/lesson-review CH3-L1_System_Prompt
```
'''